namespace Scintillating.ProxyProtocol.Parser;

/// <summary>
/// The following TLV types have already been registered
/// </summary>
public enum ProxyProtocolTlvType : byte
{
    /// <summary>
    /// Application-Layer Protocol Negotiation (ALPN).
    /// </summary>
    PP2_TYPE_ALPN = 0x01,

    /// <summary>
    /// Contains the host name value passed by the client, as an UTF8-encoded string.
    /// </summary>
    PP2_TYPE_AUTHORITY = 0x02,

    /// <summary>
    /// The value of the type PP2_TYPE_CRC32C is a 32-bit number storing the CRC32c
    /// checksum of the PROXY protocol header.
    /// </summary>
    PP2_TYPE_CRC32C = 0x03,

    /// <summary>
    /// The TLV of this type should be ignored when parsed. The value is zero or more
    /// bytes. Can be used for data padding or alignment. Note that it can be used
    /// to align only by 3 or more bytes because a TLV can not be smaller than that.
    /// </summary>
    PP2_TYPE_NOOP = 0x04,

    /// <summary>
    /// The value of the type PP2_TYPE_UNIQUE_ID is an opaque byte sequence of up to
    /// 128 bytes generated by the upstream proxy that uniquely identifies the connection.
    /// </summary>
    PP2_TYPE_UNIQUE_ID = 0x05,

    /// <summary>
    /// SSL details (TLV container).
    /// </summary>
    PP2_TYPE_SSL = 0x20,

    /// <summary>
    /// SSL version (TLV subtype).
    /// </summary>
    PP2_SUBTYPE_SSL_VERSION = 0x21,

    /// <summary>
    /// SSL CN (TLV subtype).
    /// </summary>
    PP2_SUBTYPE_SSL_CN = 0x22,

    /// <summary>
    /// The second level TLV PP2_SUBTYPE_SSL_CIPHER provides the US-ASCII string name
    /// of the used cipher, for example "ECDHE-RSA-AES128-GCM-SHA256".
    /// </summary>
    PP2_SUBTYPE_SSL_CIPHER = 0x23,

    /// <summary>
    /// The second level TLV PP2_SUBTYPE_SSL_SIG_ALG provides the US-ASCII string name
    /// of the algorithm used to sign the certificate presented by the frontend when
    /// the incoming connection was made over an SSL/TLS transport layer, for example
    /// "SHA256".
    /// </summary>
    PP2_SUBTYPE_SSL_SIG_ALG = 0x24,

    /// <summary>
    /// The second level TLV PP2_SUBTYPE_SSL_KEY_ALG provides the US-ASCII string name
    /// of the algorithm used to generate the key of the certificate presented by the
    /// frontend when the incoming connection was made over an SSL/TLS transport layer,
    /// for example "RSA2048".
    /// </summary>
    PP2_SUBTYPE_SSL_KEY_ALG = 0x25,

    /// <summary>
    /// The type PP2_TYPE_NETNS defines the value as the US-ASCII string representation of the namespace's name.
    /// </summary>
    PP2_TYPE_NETNS = 0x30,

    /// <summary>
    /// The following range of 16 type values is reserved for application-specific
    /// data and will be never used by the PROXY Protocol. If you need more values
    /// consider extending the range with a type field in your TLVs.
    /// </summary>
    PP2_TYPE_MIN_CUSTOM = 0xE0,

    /// <summary>
    /// The following range of 16 type values is reserved for application-specific
    /// data and will be never used by the PROXY Protocol. If you need more values
    /// consider extending the range with a type field in your TLVs.
    /// </summary>
    PP2_TYPE_MAX_CUSTOM = 0xEF,

    /// <summary>
    /// This range of 8 values is reserved for temporary experimental use by
    /// application developers and protocol designers. The values from the range will
    /// never be used by the PROXY protocol and should not be used by production
    /// functionality.
    /// </summary>
    PP2_TYPE_MIN_EXPERIMENT = 0xF0,

    /// <summary>
    /// This range of 8 values is reserved for temporary experimental use by
    /// application developers and protocol designers. The values from the range will
    /// never be used by the PROXY protocol and should not be used by production
    /// functionality.
    /// </summary>
    PP2_TYPE_MAX_EXPERIMENT = 0xF7,

    /// <summary>
    /// The following range of 8 values is reserved for future use, potentially to
    /// extend the protocol with multibyte type values.
    /// </summary>
    PP2_TYPE_MIN_FUTURE = 0xF8,

    /// <summary>
    /// The following range of 8 values is reserved for future use, potentially to
    /// extend the protocol with multibyte type values.
    /// </summary>
    PP2_TYPE_MAX_FUTURE = 0xFF,
}